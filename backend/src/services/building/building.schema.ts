// // For more information about this file see https://dove.feathersjs.com/guides/cli/service.schemas.html
import { resolve } from '@feathersjs/schema'
import { Type, getValidator, querySyntax } from '@feathersjs/typebox'
import type { Static } from '@feathersjs/typebox'

import type { HookContext } from '../../declarations'
import { dataValidator, queryValidator } from '../../validators'
import { professionalSchema } from '../professional/professional.schema'
import { technicalConstructionSchema } from '../technical-construction/technical-construction'
import { userSchema } from '../users/users.schema'

// Main data model schema
export const buildingSchema = Type.Object(
  {
    id: Type.Number(),
    updatedAt: Type.Optional(Type.String({ format: 'date-time' })),
    createAt: Type.String({ format: 'date-time' }),
    updatedById: Type.Optional(Type.Number()),
    createdById: Type.Number(),

    name: Type.String({ minLength: 1 }),
    description: Type.String(),
    address: Type.String({ minLength: 1 }),
    // professionalIds: Type.Array(Type.Number()),
    // technicalConstructionIds: Type.Array(Type.Number()),
    images: Type.Array(Type.String()), // url

    // generated by the resolver
    // professionals: Type.Array(Type.Ref(professionalSchema)),
    // technicalConstructions:  Type.Array(Type.Ref(technicalConstructionSchema)),
    updatedByUser: Type.Ref(userSchema),
    createdByUser: Type.Ref(userSchema)
  },
  { $id: 'Building', additionalProperties: false }
)
export type Building = Static<typeof buildingSchema>
export const buildingValidator = getValidator(buildingSchema, dataValidator)
export const buildingResolver = resolve<Building, HookContext>({})

export const buildingExternalResolver = resolve<Building, HookContext>({})

// Schema for creating new entries
export const buildingDataSchema = Type.Pick(buildingSchema, ['description'], {
  $id: 'BuildingData'
})
export type BuildingData = Static<typeof buildingDataSchema>
export const buildingDataValidator = getValidator(buildingDataSchema, dataValidator)
export const buildingDataResolver = resolve<Building, HookContext>({})

// Schema for updating existing entries
export const buildingPatchSchema = Type.Partial(buildingSchema, {
  $id: 'BuildingPatch'
})
export type BuildingPatch = Static<typeof buildingPatchSchema>
export const buildingPatchValidator = getValidator(buildingPatchSchema, dataValidator)
export const buildingPatchResolver = resolve<Building, HookContext>({})

// Schema for allowed query properties
export const buildingQueryProperties = Type.Pick(buildingSchema, ['id', 'description'])
export const buildingQuerySchema = Type.Intersect(
  [
    querySyntax(buildingQueryProperties),
    // Add additional query properties here
    Type.Object({}, { additionalProperties: false })
  ],
  { additionalProperties: false }
)
export type BuildingQuery = Static<typeof buildingQuerySchema>
export const buildingQueryValidator = getValidator(buildingQuerySchema, queryValidator)
export const buildingQueryResolver = resolve<BuildingQuery, HookContext>({})
