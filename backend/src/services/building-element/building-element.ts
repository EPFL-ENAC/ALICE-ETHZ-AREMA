// For more information about this file see https://dove.feathersjs.com/guides/cli/service.html
import { authenticate } from '@feathersjs/authentication'

import { hooks as schemaHooks } from '@feathersjs/schema'

import {
  buildingElementDataSchema,
  buildingElementPatchSchema,
  buildingElementQuerySchema,
  buildingElementDataValidator,
  buildingElementPatchValidator,
  buildingElementQueryValidator,
  buildingElementResolver,
  buildingElementExternalResolver,
  buildingElementDataResolver,
  buildingElementPatchResolver,
  buildingElementQueryResolver,
  generateFake,
  defaultBuildingElements
} from './building-element.schema'

import type { Application } from '../../declarations'
import { BuildingElementService, getOptions } from './building-element.class'
import { buildingElementPath, buildingElementMethods } from './building-element.shared'
import { createSwaggerServiceOptions } from 'feathers-swagger'
import { logger } from '../../logger'
import { getRandomUser } from '../../helpers/getRandomUser'
import { userIterations } from '../users/users'

export * from './building-element.class'
export * from './building-element.schema'

// A configure function that registers the service and its hooks via `app.configure`
export const buildingElement = (app: Application) => {
  // Register our service on the Feathers application
  app.use(buildingElementPath, new BuildingElementService(getOptions(app)), {
    // A list of all methods this service exposes externally
    methods: buildingElementMethods,
    // You can add additional custom events to be sent to clients here
    events: [],
    docs: createSwaggerServiceOptions({
      schemas: {
        buildingElementDataSchema,
        buildingElementPatchSchema,
        buildingElementQuerySchema
      },
      docs: {
        // any options for service.docs can be added here
        securities: ['all']
      }
    }),
    createFake: async () => {
      const user = await getRandomUser(app, userIterations)
      const fakeData = await generateFake(user)
      // professional-type text must be unique
      const res = await app.service(buildingElementPath).find({ query: { $limit: 0, text: fakeData.text }})
      if (res.total === 0) {
        logger.debug(`fake professional-type data generated: ${JSON.stringify(fakeData)}`)
        const fakeDataCreatedByService = await app.service(buildingElementPath).create(fakeData, {})
        logger.info(`professional-type data generated by service: ${JSON.stringify(fakeDataCreatedByService)}`)
        return fakeDataCreatedByService
      }
      return null
    }
  })
  // Initialize hooks
  app.service(buildingElementPath).hooks({
    around: {
      all: [
        authenticate('jwt'),
        schemaHooks.resolveExternal(buildingElementExternalResolver),
        schemaHooks.resolveResult(buildingElementResolver)
      ]
    },
    before: {
      all: [
        schemaHooks.validateQuery(buildingElementQueryValidator),
        schemaHooks.resolveQuery(buildingElementQueryResolver)
      ],
      find: [],
      get: [],
      create: [
        schemaHooks.validateData(buildingElementDataValidator),
        schemaHooks.resolveData(buildingElementDataResolver)
      ],
      patch: [
        schemaHooks.validateData(buildingElementPatchValidator),
        schemaHooks.resolveData(buildingElementPatchResolver)
      ],
      remove: []
    },
    after: {
      all: []
    },
    error: {
      all: []
    }
  })
}

// Add this service to the service type index
declare module '../../declarations' {
  interface ServiceTypes {
    [buildingElementPath]: BuildingElementService
  }
}
