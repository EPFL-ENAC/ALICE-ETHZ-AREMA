// For more information about this file see https://dove.feathersjs.com/guides/cli/service.html
import { authenticate } from '@feathersjs/authentication'

import { hooks as schemaHooks } from '@feathersjs/schema'

import {
  buildingProfessionalDataValidator,
  buildingProfessionalPatchValidator,
  buildingProfessionalQueryValidator,
  buildingProfessionalResolver,
  buildingProfessionalExternalResolver,
  buildingProfessionalDataResolver,
  buildingProfessionalPatchResolver,
  buildingProfessionalQueryResolver,
  buildingProfessionalSchema,
  buildingProfessionalDataSchema,
  buildingProfessionalPatchSchema,
  buildingProfessionalQuerySchema,
  generateFake
} from './building-professional.schema'

import type { Application } from '../../declarations'
import { BuildingProfessionalService, getOptions } from './building-professional.class'
import { buildingProfessionalPath, buildingProfessionalMethods } from './building-professional.shared'
import { createSwaggerServiceOptions } from 'feathers-swagger'
import { User, userPath } from '../users/users.shared'
import { getRandomUser } from '../../helpers/getRandomUser'
import { getRandomBuilding } from '../../helpers/getRandomBuilding'
import { getRandomProfessional } from '../../helpers/getRandomProfessional'
import { logger } from '../../logger'
import { userIterations } from '../users/users'
import { buildingIterations } from '../building/building'
import { professionalIterations } from '../professional/professional'
import { entityCreated } from '../../hooks/entity-created'

export * from './building-professional.class'
export * from './building-professional.schema'

export const buildingProfessionalIterations = 6000
// A configure function that registers the service and its hooks via `app.configure`

// information on how to create a joint table: https://github.com/feathersjs/feathers/issues/852

export const buildingProfessional = (app: Application) => {
  // Register our service on the Feathers application
  app.use(buildingProfessionalPath, new BuildingProfessionalService(getOptions(app)), {
    // A list of all methods this service exposes externally
    methods: buildingProfessionalMethods,
    // You can add additional custom events to be sent to clients here
    events: [],
    docs: createSwaggerServiceOptions({
      schemas: {
        buildingProfessionalSchema,
        buildingProfessionalDataSchema,
        buildingProfessionalPatchSchema,
        buildingProfessionalQuerySchema
      },
      docs: {
        // any options for service.docs can be added here
        securities: ['all']
      }
    }),
    createFake: async () => {
      const user = await getRandomUser(app, userIterations)
      const building = await getRandomBuilding(app, buildingIterations)
      const professional = await getRandomProfessional(app, professionalIterations)
      const fakeData = await generateFake(user, building, professional)

      logger.info(`fake data generated: ${JSON.stringify(fakeData)}`)
      const fakeDataCreatedByService = await app.service(buildingProfessionalPath).create(fakeData, {})
      logger.info(`data generated by service: ${JSON.stringify(fakeDataCreatedByService)}`)
      return fakeDataCreatedByService
    },
    fakerOptions: {
      iterations: buildingProfessionalIterations
    }
  })
  // Initialize hooks
  app.service(buildingProfessionalPath).hooks({
    around: {
      all: [
        authenticate('jwt'),
        schemaHooks.resolveExternal(buildingProfessionalExternalResolver),
        schemaHooks.resolveResult(buildingProfessionalResolver)
      ]
    },
    before: {
      all: [
        schemaHooks.validateQuery(buildingProfessionalQueryValidator),
        schemaHooks.resolveQuery(buildingProfessionalQueryResolver)
      ],
      find: [],
      get: [],
      create: [
        schemaHooks.validateData(buildingProfessionalDataValidator),
        entityCreated,
        schemaHooks.resolveData(buildingProfessionalDataResolver)
      ],
      patch: [
        schemaHooks.validateData(buildingProfessionalPatchValidator),
        schemaHooks.resolveData(buildingProfessionalPatchResolver)
      ],
      remove: []
    },
    after: {
      all: []
    },
    error: {
      all: []
    }
  })
}

// Add this service to the service type index
declare module '../../declarations' {
  interface ServiceTypes {
    [buildingProfessionalPath]: BuildingProfessionalService
  }
}
