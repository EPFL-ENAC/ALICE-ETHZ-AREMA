version: "3.9"
services:
  reverse-proxy:
    image: traefik:v2.9
    command:
      - "--providers.docker"
      - "--providers.file.directory=/configuration/"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
    environment:
      - SSL_CERT_CRT=${SSL_CERT_CRT}
      - SSL_CERT_KEY=${SSL_CERT_KEY}
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/configuration/traefik.yml
      - /etc/ssl:/etc/ssl
  frontend:
    build: ./frontend
    expose:
      - 80
    labels:
      - "traefik.http.routers.frontend.priority=101"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.middlewares=frontend-middleware"
      - "traefik.http.middlewares.frontend-middleware.stripprefix.prefixes=/"
    restart: unless-stopped
  admin:
    build: ./admin
    expose:
      - 80
    labels:
      - "traefik.http.routers.admin.priority=500"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.routers.admin.rule=PathPrefix(`/admin`)"
      - "traefik.http.services.admin.loadbalancer.server.port=80"
      - "traefik.http.routers.admin.middlewares=admin-middleware"
      - "traefik.http.middlewares.admin-middleware.stripprefix.prefixes=/admin"
    restart: unless-stopped
  backend:
    build: ./backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
    expose:
      - 3030
    labels:
      - "traefik.http.routers.backend.priority=1000"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3030"
      - "traefik.http.routers.backend.middlewares=backend-middleware"
      - "traefik.http.middlewares.backend-middleware.stripprefix.prefixes=/api"
    restart: unless-stopped
  upload-fast-api:
    build: ./uploadFASTAPI
    environment:
      - S3_ENDPOINT_HOSTNAME=${S3_ENDPOINT_HOSTNAME}
      - S3_ENDPOINT_PROTOCOL=${S3_ENDPOINT_PROTOCOL}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION=${S3_REGION} 
      - S3_Bucket=${S3_Bucket} 
      - S3_Key=${S3_Key} 
      - CORS_ENABLED=${CORS_ENABLED} 
      - ROOT_PATH=
      - AUTH_SERVER="http://couchdb:5984"
    expose:
      - 5050
    labels:
      - "traefik.http.routers.uploadFASTAPI.priority=1001"
      - "traefik.http.routers.uploadFASTAPI.tls=true"
      - "traefik.http.routers.uploadFASTAPI.rule=PathPrefix(`/upload-api`)"
      - "traefik.http.services.uploadFASTAPI.loadbalancer.server.port=5050"
      - "traefik.http.routers.uploadFASTAPI.middlewares=uploadFASTAPI-middleware"
      - "traefik.http.middlewares.uploadFASTAPI-middleware.stripprefix.prefixes=/upload-api"
    restart: unless-stopped
  s3_server:
    build: ./s3_server
    restart: unless-stopped
    environment:
      - DNS=${DNS}
      - S3_ENDPOINT_HOSTNAME=${S3_ENDPOINT_HOSTNAME}
      - S3_ENDPOINT_PROTOCOL=${S3_ENDPOINT_PROTOCOL}
      - S3_BUCKET_NAME=${S3_Bucket}
    labels:
      - "traefik.http.routers.s3Server.priority=1002"
      - "traefik.http.routers.s3Server.tls=true"
      - "traefik.http.routers.s3Server.rule=PathPrefix(`/s3`)"
      - "traefik.http.routers.s3Server.middlewares=s3Server-stripprefix"
      - "traefik.http.middlewares.s3Server-stripprefix.stripprefix.prefixes=/s3"
      - "traefik.http.services.s3Server.loadbalancer.server.port=5660"
    ports:
      - '5660:5660'
  postgres:
    image: postgres:15.2-alpine
    expose:
      - 5432
    ports:
      # Expose Postgres port we need it for dev purposes
      - '5432:5432'
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
  pgadmin:
      container_name: pgadmin4_container
      image: dpage/pgadmin4
      restart: always
      environment:
        PGADMIN_DEFAULT_EMAIL: enacit4research@epfl.ch
        PGADMIN_DEFAULT_PASSWORD: password
      ports:
        - "5050:5050"
        - "5080:80"
        - "5443:443"
volumes:
  couchdb_data:
    driver: local
